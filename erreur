import tkinter as tk

# --- MODIF DEBUT ---
import Freenove_DHT as DHT11  # Module pour le capteur
import time
import threading  # Pour lire le capteur sans bloquer l'interface
# --- MODIF FIN ---

# --- MODIF DEBUT ---
# Variables pour stocker les valeurs du capteur
current_temp = 0.0
current_humidity = 0.0
# --- MODIF FIN ---

door = "Fermé"
mode = "Désactivé"
mode_value = "disabled"


def change_mode():
    global mode
    global mode_value
    if mode == "Désactivé":
        mode = "Activé"
        mode_value = "normal"
    else:
        mode = "Désactivé"
        mode_value = "disabled"
    test_mode.configure(text=f"Mode test : {mode}")
    change_state()


def change_state():
    plus_btn.configure(state=mode_value)
    minus_btn.configure(state=mode_value)
    open_btn.configure(state=mode_value)
    close_btn.configure(state=mode_value)
    start_btn.configure(state=mode_value)
    end_btn.configure(state=mode_value)


def plus_temp():
    # --- MODIF DEBUT ---
    global current_temp
    current_temp += 1
    update_display()
    # --- MODIF FIN ---


def minus_temp():
    # --- MODIF DEBUT ---
    global current_temp
    current_temp -= 1
    update_display()
    # --- MODIF FIN ---


# --- MODIF DEBUT ---
def update_display():
    # Met à jour le texte affiché pour la température et l’humidité
    temp_value_label.config(text=f"{current_temp:.1f} °C   (H: {current_humidity:.1f}%)")
# --- MODIF FIN ---


# --- MODIF DEBUT ---
# Initialisation du capteur sur GPIO 4
sensor = DHT11.DHT(pin=4)

def read_temp_loop():
    """
    Lecture périodique du DHT11 toutes les 2 secondes
    """
    def loop():
        global current_temp, current_humidity
        while True:
            status = sensor.readDHT11()
            if status == sensor.DHTLIB_OK:
                current_temp = sensor.temperature
                current_humidity = sensor.humidity
                window.after(0, update_display)
            else:
                print("Erreur lecture capteur, code:", status)
            time.sleep(2)

    t = threading.Thread(target=loop, daemon=True)
    t.start()
# --- MODIF FIN ---


window = tk.Tk()
window.geometry('400x450')

title = tk.Label(window, text="Système de surveillance", font=("Arial", 15, "bold"), pady=10)

temp = tk.Label(window, text="Température:")
temp2 = tk.Label(window, text="Température:")

# --- MODIF DEBUT ---
temp_value_label = tk.Label(window, text="0.0", fg="red", font=("Arial", 12))
# --- MODIF FIN ---

door_status = tk.Label(window, text=f"État de la trappe : {door}", pady=10)

test_mode = tk.Label(window, text=f"Mode test : {mode}", fg="blue", pady=10, font=("Arial", 10, "bold"))

mode_btn = tk.Button(window, text="Basculer mode test", command=change_mode)

frame1 = tk.Frame(window)
# --- MODIF DEBUT ---
plus_btn = tk.Button(frame1, text="+", command=plus_temp, background="lightgreen", padx=8, pady=5, state=tk.DISABLED)
minus_btn = tk.Button(frame1, text="-", command=minus_temp, background="red", padx=8, pady=5, state=tk.DISABLED)
# --- MODIF FIN ---

door_text = tk.Label(window, text="Trappe :")
frame2 = tk.Frame(window)
open_btn = tk.Button(frame2, text="Ouvrir", command=change_mode, background="lightgreen", pady=5, state=tk.DISABLED)
close_btn = tk.Button(frame2, text="Fermer", command=change_mode, background="red", pady=5, state=tk.DISABLED)

alarm_text = tk.Label(window, text="Alarme :")
frame3 = tk.Frame(window)
start_btn = tk.Button(frame3, text="Activer", command=change_mode, background="lightgreen", pady=5, state=tk.DISABLED)
end_btn = tk.Button(frame3, text="Arreter", command=change_mode, background="red", pady=5, state="disabled")

title.pack()
temp.pack()

# --- MODIF DEBUT ---
temp_value_label.pack()
# --- MODIF FIN ---

door_status.pack()
test_mode.pack()
mode_btn.pack(pady=10)
temp2.pack()
frame1.pack(pady=5)
plus_btn.pack(side=tk.LEFT, padx=5, pady=5)
minus_btn.pack(side=tk.LEFT, padx=5, pady=5)
door_text.pack()
frame2.pack(pady=5)
open_btn.pack(side=tk.LEFT, padx=5, pady=5)
close_btn.pack(side=tk.LEFT, padx=5, pady=5)
alarm_text.pack()
frame3.pack(pady=5)
start_btn.pack(side=tk.LEFT, padx=5, pady=5)
end_btn.pack(side=tk.LEFT, padx=5, pady=5)

# --- MODIF DEBUT ---
read_temp_loop()
# --- MODIF FIN ---


def on_close():
    print("Nettoyage GPIO...")
    try:
        import RPi.GPIO as GPIO
        GPIO.cleanup()
    except:
        pass
    window.destroy()


window.protocol("WM_DELETE_WINDOW", on_close)
window.mainloop()
