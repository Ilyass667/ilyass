# Fichier Window.py modifié : intégration Firebase et conservation de l’interface Tkinter

import tkinter as tk
import time
import threading
from datetime import datetime
from Freenove_DHT import DHT  # Module pour le capteur DHT11 (fichier Freenove_DHT.py dans le même dossier)
import RPi.GPIO as GPIO  # Bibliothèque pour contrôler les GPIO
import firebase_admin  # SDK admin Firebase
from firebase_admin import credentials, db  # Pour l'accès à la Realtime Database

# === Initialisation Firebase ===
cred = credentials.Certificate("serviceAccountKey.json")  # Ta clé JSON de service Firebase
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://surveillanceincendie-86824-default-rtdb.firebaseio.com/'  # Ton URL Firebase (avec slash final)
})

# === Variables globales ===
temp_value = 15.0          # Température par défaut (pour le mode test)
current_humidity = 0.0     # Humidité mesurée
alarm_active = False       # État de l'alarme automatique
test_mode_active = False   # État du mode Test manuel
manual_alarm_override = False  # Si alarme forcée manuellement

# === Configuration DHT11 ===
DHTPin = 17  # GPIO 17
dht = DHT(DHTPin)

# === Configuration des actionneurs ===
BUZZER_PIN = 27  # GPIO 27
LED_PIN = 13     # GPIO 13
SERVO_PIN = 24   # GPIO 24
GPIO.setmode(GPIO.BCM)
GPIO.setup(BUZZER_PIN, GPIO.OUT)
GPIO.setup(LED_PIN, GPIO.OUT)
GPIO.setup(SERVO_PIN, GPIO.OUT)
GPIO.output(BUZZER_PIN, GPIO.LOW)
GPIO.output(LED_PIN, GPIO.LOW)
servo = GPIO.PWM(SERVO_PIN, 50)  # 50 Hz
servo.start(0)

def set_servo_angle(angle):
    duty = angle / 18 + 2
    GPIO.output(SERVO_PIN, True)
    servo.ChangeDutyCycle(duty)
    time.sleep(1)
    GPIO.output(SERVO_PIN, False)
    servo.ChangeDutyCycle(0)

def open_door():
    set_servo_angle(90)
    door_status.config(text="État de la trappe : Ouvert")
    print("Trappe ouverte.")

def close_door():
    set_servo_angle(0)
    door_status.config(text="État de la trappe : Fermé")
    print("Trappe fermée.")

# === Boucle d'alarme automatique ===
def control_alarm():
    global alarm_active
    while True:
        if not manual_alarm_override:
            if temp_value >= 23.0 and not alarm_active:
                GPIO.output(BUZZER_PIN, GPIO.HIGH)
                GPIO.output(LED_PIN, GPIO.HIGH)
                open_door()
                alarm_active = True
                print("Alarme activée ! Température critique.")
            elif temp_value < 23.0 and alarm_active:
                GPIO.output(BUZZER_PIN, GPIO.LOW)
                GPIO.output(LED_PIN, GPIO.LOW)
                close_door()
                alarm_active = False
                print("Alarme désactivée. Température normale.")
        time.sleep(1)

def control_alarm_manual(activate):
    """Active ou désactive l'alarme manuellement."""
    global alarm_active, manual_alarm_override
    manual_alarm_override = activate
    if activate:
        GPIO.output(BUZZER_PIN, GPIO.HIGH)
        GPIO.output(LED_PIN, GPIO.HIGH)
        open_door()
        alarm_active = True
        print("Alarme activée manuellement.")
    else:
        GPIO.output(BUZZER_PIN, GPIO.LOW)
        GPIO.output(LED_PIN, GPIO.LOW)
        close_door()
        alarm_active = False
        print("Alarme désactivée manuellement.")

# === Gestion du mode Test ===
temp_value = 15.0
current_humidity = 0.0

# Fonctions pour boutons + et -
def plus_temp():
    global temp_value
    if test_mode_active:
        temp_value += 1
        update_display()

def minus_temp():
    global temp_value
    if test_mode_active:
        temp_value -= 1
        update_display()

# Met à jour l'affichage temperature/humidity
def update_display():
    temp_value_label.config(text=f"{temp_value:.1f} °C   (H : {current_humidity:.1f}%)")

# Fonction principale de lecture DHT11 et envoi Firebase
def read_temp_loop():
    def loop():
        global temp_value, current_humidity
        while True:
            if not test_mode_active:
                chk = dht.readDHT11()
                if chk == 0:
                    current_humidity = dht.getHumidity()
                    temp_value = dht.getTemperature()
                    timestamp = datetime.now().isoformat()
                    data = {
                        'temperature': temp_value,
                        'humidity': current_humidity,
                        'timestamp': timestamp
                    }
                    try:
                        db.reference('donnees').push(data)
                    except Exception as e:
                        print("Erreur Firebase :", e)
                    window.after(0, update_display)
                else:
                    print(f"Erreur lecture DHT11, code : {chk}")
            time.sleep(15)  # Envoi toutes les 15s
    t = threading.Thread(target=loop, daemon=True)
    t.start()

# === Interface Tkinter ===
window = tk.Tk()
window.geometry('400x480')
window.title("Système de surveillance incendie")

title = tk.Label(window, text="Système de surveillance", font=("Arial", 15, "bold"), pady=10)
temp_value_label = tk.Label(window, text="0.0 °C   (H : 0.0%)", fg="red", font=("Arial", 12))
door_status = tk.Label(window, text="État de la trappe : Fermé", pady=10)
test_mode = tk.Label(window, text="Mode test : Désactivé", fg="blue", pady=10, font=("Arial", 10, "bold"))

# Bouton mode Test
def toggle_test_mode():
    global test_mode_active
    test_mode_active = not test_mode_active
    state = "Activé" if test_mode_active else "Désactivé"
    test_mode.config(text=f"Mode test : {state}")

mode_btn = tk.Button(window, text="Basculer mode test", command=toggle_test_mode)

# Cadre boutons + / -
frame1 = tk.Frame(window)
plus_btn = tk.Button(frame1, text="+", command=plus_temp, width=3, state=tk.DISABLED)
minus_btn = tk.Button(frame1, text="-", command=minus_temp, width=3, state=tk.DISABLED)

# Cadre trappe
frame2 = tk.Frame(window)
open_btn = tk.Button(frame2, text="Ouvrir trappe", command=open_door, state=tk.DISABLED)
close_btn = tk.Button(frame2, text="Fermer trappe", command=close_door, state=tk.DISABLED)

# Cadre alarme manuelle
frame3 = tk.Frame(window)
start_btn = tk.Button(frame3, text="Activer alarme", command=lambda: control_alarm_manual(True), state=tk.DISABLED)
end_btn = tk.Button(frame3, text="Arrêter alarme", command=lambda: control_alarm_manual(False), state=tk.DISABLED)

# Placement éléments
for w in [title, temp_value_label, door_status, test_mode, mode_btn, frame1, frame2, frame3]:
    w.pack(pady=5)
plus_btn.pack(side=tk.LEFT, padx=5)
minus_btn.pack(side=tk.LEFT)
open_btn.pack(side=tk.LEFT, padx=5)
close_btn.pack(side=tk.LEFT)
start_btn.pack(side=tk.LEFT, padx=5)
end_btn.pack(side=tk.LEFT)

# Démarre threads
read_temp_loop()
alarm_thread = threading.Thread(target=control_alarm, daemon=True)
alarm_thread.start()

# Nettoyage GPIO à la fermeture
window.protocol("WM_DELETE_WINDOW", lambda: (GPIO.cleanup(), servo.stop(), window.destroy()))
window.mainloop()
