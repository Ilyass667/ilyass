import tkinter as tk
import time
import threading
from datetime import datetime
from Freenove_DHT import DHT
import RPi.GPIO as GPIO
import firebase_admin
from firebase_admin import credentials, db

# === Initialisation Firebase ===
cred = credentials.Certificate("serviceAccountKey.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://surveillanceincendie-86824-default-rtdb.firebaseio.com/'
})

# === Variables globales ===
temp_value = 15.0
current_humidity = 0.0
door = "Fermé"
mode = "Désactivé"
alarm_active = False
test_mode_active = False
manual_alarm_override = False

# === Configuration DHT11 ===
DHTPin = 17
dht = DHT(DHTPin)

# === Configuration actionneurs ===
BUZZER_PIN = 27
LED_PIN = 13
SERVO_PIN = 24
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(BUZZER_PIN, GPIO.OUT)
GPIO.setup(LED_PIN, GPIO.OUT)
GPIO.setup(SERVO_PIN, GPIO.OUT)
GPIO.output(BUZZER_PIN, GPIO.LOW)
GPIO.output(LED_PIN, GPIO.LOW)
servo = GPIO.PWM(SERVO_PIN, 50)
servo.start(0)

def set_servo_angle(angle):
    duty = angle / 18 + 2
    GPIO.output(SERVO_PIN, True)
    servo.ChangeDutyCycle(duty)
    time.sleep(0.5)
    GPIO.output(SERVO_PIN, False)
    servo.ChangeDutyCycle(0)

def open_door():
    set_servo_angle(90)
    door_status.config(text="État de la trappe : Ouvert")
    print("[ACTION] Trappe ouverte")

def close_door():
    set_servo_angle(0)
    door_status.config(text="État de la trappe : Fermé")
    print("[ACTION] Trappe fermée")

def control_alarm():
    global alarm_active
    while True:
        if not manual_alarm_override:
            if temp_value >= 27.0 and not alarm_active:
                GPIO.output(BUZZER_PIN, GPIO.HIGH)
                GPIO.output(LED_PIN, GPIO.HIGH)
                open_door()
                alarm_active = True
                print("[ALARME] Activée - Température critique!")
            elif temp_value < 27.0 and alarm_active:
                GPIO.output(BUZZER_PIN, GPIO.LOW)
                GPIO.output(LED_PIN, GPIO.LOW)
                close_door()
                alarm_active = False
                print("[ALARME] Désactivée - Température normale")
        time.sleep(1)

def control_alarm_manual(activate):
    global alarm_active, manual_alarm_override
    manual_alarm_override = activate
    if activate:
        GPIO.output(BUZZER_PIN, GPIO.HIGH)
        GPIO.output(LED_PIN, GPIO.HIGH)
        open_door()
        alarm_active = True
        print("[MANUEL] Alarme activée")
    else:
        GPIO.output(BUZZER_PIN, GPIO.LOW)
        GPIO.output(LED_PIN, GPIO.LOW)
        close_door()
        alarm_active = False
        print("[MANUEL] Alarme désactivée")

def change_mode():
    global mode, test_mode_active, alarm_active, manual_alarm_override
    if mode == "Désactivé":
        mode = "Activé"
        test_mode_active = True
    else:
        mode = "Désactivé"
        test_mode_active = False
        close_door()
        manual_alarm_override = False
        alarm_active = False
    
    # Mise à jour de l'interface
    test_mode.config(text=f"Mode test : {mode}")
    btn_state = tk.NORMAL if test_mode_active else tk.DISABLED
    for btn in [plus_btn, minus_btn, open_btn, close_btn, start_btn, end_btn]:
        btn.configure(state=btn_state)
    
    print(f"[MODE] {'TEST' if test_mode_active else 'AUTOMATIQUE'}")

def plus_temp():
    global temp_value
    if test_mode_active:
        temp_value += 1
        update_display()
        print(f"[TEST] Température augmentée: {temp_value}°C")

def minus_temp():
    global temp_value
    if test_mode_active:
        temp_value -= 1
        update_display()
        print(f"[TEST] Température diminuée: {temp_value}°C")

def update_display():
    temp_value_label.config(text=f"{temp_value:.1f} °C   (H: {current_humidity:.1f}%)")

def read_temp_loop():
    def loop():
        global temp_value, current_humidity
        while True:
            if not test_mode_active:
                chk = dht.readDHT11()
                if chk == 0:
                    current_humidity = dht.humidity
                    temp_value = dht.temperature
                    timestamp = datetime.now().isoformat()
                    data = {
                        'temperature': temp_value,
                        'humidity': current_humidity,
                        'timestamp': timestamp
                    }
                    try:
                        ref = db.reference('donnees')
                        ref.push(data)
                        print(f"[FIREBASE] Données envoyées: {data}")
                    except Exception as e:
                        print(f"[ERREUR] Firebase: {str(e)}")
                    window.after(0, update_display)
                time.sleep(15)
            else:
                time.sleep(1)
    threading.Thread(target=loop, daemon=True).start()

def process_commands_loop():
    def loop():
        global test_mode_active
        ref = db.reference('commands')
        while True:
            try:
                cmds = ref.order_by_child('executed').equal_to(False).get()
                if cmds:
                    print(f"\n[FIREBASE] {len(cmds)} commande(s) reçue(s)")
                    for key, cmd in cmds.items():
                        print(f"[COMMANDE] ID: {key} | Contenu: {cmd}")
                        
                        # Traitement du mode
                        if 'mode' in cmd:
                            test_mode_active = (cmd['mode'] == 'test')
                            window.after(0, lambda: test_mode.config(
                                text=f"Mode test : {'Activé' if test_mode_active else 'Désactivé'}"))
                            print(f"[MODE] Changé en {'TEST' if test_mode_active else 'AUTO'}")
                        
                        # Traitement des actions
                        action = cmd.get('action')
                        if action == 'trap_open':
                            open_door()
                        elif action == 'trap_close':
                            close_door()
                        elif action == 'buzzer_on':
                            control_alarm_manual(True)
                        elif action == 'buzzer_off':
                            control_alarm_manual(False)
                        
                        # Marquer comme exécuté
                        ref.child(key).update({'executed': True})
                        print(f"[STATUS] Commande {key} exécutée")
                
                time.sleep(2)
            except Exception as e:
                print(f"[ERREUR] Traitement commandes: {str(e)}")
                time.sleep(5)
    threading.Thread(target=loop, daemon=True).start()

# === Interface graphique ===
window = tk.Tk()
window.title("Système de Surveillance d'Incendie")
window.geometry('400x500')

# Configuration du style
title_font = ("Arial", 16, "bold")
label_font = ("Arial", 12)
button_style = {"padx": 10, "pady": 5, "borderwidth": 2}

# Widgets
title = tk.Label(window, text="SYSTÈME DE SURVEILLANCE", font=title_font, pady=15)
temp_label = tk.Label(window, text="Température actuelle:", font=label_font)
temp_value_label = tk.Label(window, text="0.0 °C", fg="red", font=("Arial", 14, "bold"))
door_status = tk.Label(window, text="État de la trappe : Fermé", font=label_font, pady=10)
test_mode = tk.Label(window, text="Mode test : Désactivé", fg="blue", font=label_font)
mode_btn = tk.Button(window, text="Basculer Mode", command=change_mode, **button_style)

# Panneau de contrôle test
control_frame = tk.LabelFrame(window, text="Contrôle Manuel", padx=10, pady=10)
temp_controls = tk.Frame(control_frame)
plus_btn = tk.Button(temp_controls, text="+", command=plus_temp, bg="lightgreen", width=5, state=tk.DISABLED)
minus_btn = tk.Button(temp_controls, text="-", command=minus_temp, bg="#ff9999", width=5, state=tk.DISABLED)

door_controls = tk.Frame(control_frame)
open_btn = tk.Button(door_controls, text="Ouvrir", command=open_door, bg="lightgreen", width=8, state=tk.DISABLED)
close_btn = tk.Button(door_controls, text="Fermer", command=close_door, bg="#ff9999", width=8, state=tk.DISABLED)

alarm_controls = tk.Frame(control_frame)
start_btn = tk.Button(alarm_controls, text="Activer", command=lambda: control_alarm_manual(True), bg="lightgreen", width=8, state=tk.DISABLED)
end_btn = tk.Button(alarm_controls, text="Désactiver", command=lambda: control_alarm_manual(False), bg="#ff9999", width=8, state=tk.DISABLED)

# Placement des éléments
title.pack()
temp_label.pack()
temp_value_label.pack()
door_status.pack()
test_mode.pack()
mode_btn.pack(pady=10)

control_frame.pack(pady=10, padx=20, fill=tk.X)

tk.Label(control_frame, text="Température simulée:").pack()
temp_controls.pack(pady=5)
plus_btn.pack(side=tk.LEFT, padx=5)
minus_btn.pack(side=tk.LEFT)

tk.Label(control_frame, text="Contrôle trappe:").pack(pady=(10,0))
door_controls.pack(pady=5)
open_btn.pack(side=tk.LEFT, padx=5)
close_btn.pack(side=tk.LEFT)

tk.Label(control_frame, text="Contrôle alarme:").pack(pady=(10,0))
alarm_controls.pack(pady=5)
start_btn.pack(side=tk.LEFT, padx=5)
end_btn.pack(side=tk.LEFT)

# Démarrage des threads
read_temp_loop()
threading.Thread(target=control_alarm, daemon=True).start()
process_commands_loop()

# Gestion de la fermeture
def on_close():
    print("\n[SYSTÈME] Arrêt en cours...")
    GPIO.output(BUZZER_PIN, GPIO.LOW)
    GPIO.output(LED_PIN, GPIO.LOW)
    close_door()
    servo.stop()
    GPIO.cleanup()
    window.destroy()

window.protocol("WM_DELETE_WINDOW", on_close)
window.mainloop()
